name: "PR to Master"
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master

jobs:
  validate_pr:
    permissions:
      pull-requests: write
    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/semantic_pull_request.yml@v1
  validate_dart:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Install Flutter
        uses: subosito/flutter-action@v2
      - name: Install dependencies
        run: flutter pub get
      # - name: Run build runner
      #   run: flutter pub run build_runner build --delete-conflicting-outputs
      # - name: Generate l10n
      #   run: flutter gen-l10n
      - name: Run tests
        run: flutter test
      - name: Upload test failures
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-failures
          path: test/failures/
          if-no-files-found: ignore
      - name: Run linter
        run: flutter analyze
      - name: Configure git
        run: |
          git fetch --prune
          git config --global user.name "GitHub Actions"
          git config --global user.email "gh-actions@emdgroup.com"

      - name: üîÇ Run standard-version
        run: |
          npx standard-version --skip.tag --skip.commit

      - name: ‚èé Get new version
        uses: actions/github-script@v7
        id: get_new_version
        with:
          result-encoding: string
          script: |
            const fs = require('fs');
            const package = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            return package.version;

      - name: Run M-Trust API Guard
        if: ${{ github.actor != 'dependabot[bot]' }}
        uses: emdgroup/mtrust-api-guard@main  # Or pin to a commit/tag
        with:
          src_path: './lib/src'
          base_doc: 'origin/master:./lib/documentation.g.dart'
          new_doc: './lib/documentation.g.dart'
          new_version: '${{ steps.get_new_version.outputs.result }}'
          comment_on_pr: true
          fail_on_error: true
          ref: ${{ github.ref }}
